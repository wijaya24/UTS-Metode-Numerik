# Reflan Guntia Wijaya_2309076040
# UTS Metode Numerik

# Tugas 2a
import numpy as np

print("[SISTEM PERSAMAAN LINIER MENGGUNAKAN METODE ELIMINASI GAUSS]")

def menghilangkan_gauss(A, b):
    n = len(b)
    Ab = np.hstack([A, b.reshape(-1, 1)])

    # Proses eliminasi
    for i in range(n):
        maksimal_kolom = np.argmax(np.abs(Ab[i:, i])) + i
        Ab[[i, maksimal_kolom]] = Ab[[maksimal_kolom, i]]  

        for j in range(i + 1, n):
            faktor = Ab[j, i] / Ab[i, i]
            Ab[j] = Ab[j] - faktor * Ab[i]
    
    x = np.zeros(n)
    for i in range(n - 1, -1, -1):
        x[i] = (Ab[i, -1] - np.dot(Ab[i, i + 1:n], x[i + 1:n])) / Ab[i, i]
    
    return x

# Matriks koefisien
A = np.array([[4, -1, -1],
              [-1, 3, -1],
              [-1, -1, 5]], dtype=float)

# Vektor konstanta
b = np.array([5, 3, 4], dtype=float)

# Menyelesaikan sistem persamaan
solusi = menghilangkan_gauss(A, b)
print("Hasil persamaan adalah:", solusi)
print("=============================================================")

# Tugas 2b
import numpy as np

print("[DETERMINAN MATRIKS MENGGUNAKAN EKSPANSI KOFAKTOR]")

def determinan_matriks(matriks):
    if len(matriks) == 2:
        return matriks[0][0] * matriks[1][1] - matriks[0][1] * matriks[1][0]
    
    det = 0
    for c in range(len(matriks)):
        det += ((-1) ** c) * matriks[0][c] * determinan_matriks(minor(matriks, 0, c))
    return det

def minor(matriks, i, j):
    return [row[:j] + row[j+1:] for row in (matriks[:i] + matriks[i+1:])]

# Matriks pada sistem persamaan
matriks_koefisien = [
    [4, -1, -1],
    [-1, 3, -1],
    [-1, -1, 5]
]

# Menghitung determinan
det = determinan_matriks(matriks_koefisien)
print("Determinant dari matriks adalah:", det)
print("=============================================================")

# Tugas 2c
print("[FUNGSI DARI KEDUA PERSAMAAN]")

# Menyelesaikan sistem persamaan dengan metode gauss
solusi = menghilangkan_gauss(A, b)
print("Hasil persamaan adalah:", solusi)

# Menghitung determinan
det = determinan_matriks(matriks_koefisien)
print("Determinant dari matriks adalah:", det)
print("=============================================================")

# Tugas 2d
import numpy as np

print("[PERSAMAAN LINIER MENGGUNAKAN METODE GAUSS JORDAN]")

def metode_gauss_jordan(a, b):
    n = len(b)
    argumen_matriks = np.hstack((a, b.reshape(-1, 1)))

    for i in range(n):
        argumen_matriks[i] = argumen_matriks[i] / argumen_matriks[i, i]
        
        for j in range(n):
            if i != j:
                argumen_matriks[j] = argumen_matriks[j] - argumen_matriks[i] * argumen_matriks[j, i]

    return argumen_matriks[:, -1]

# Koefisien dari sistem persamaan
A = np.array([[4, -1, -1],
              [-1, 3, -1],
              [-1, -1, 5]])

# Konstanta dari sistem persamaan
B = np.array([5, 3, 4])

# Menyelesaikan sistem persamaan
solusi = metode_gauss_jordan(A, B)
print("Hasil persamaan metode gauss jordan adalah:", solusi)
solusi = menghilangkan_gauss(A, b)
print("Hasil persamaan metode gauss adalah:", solusi)
print("=============================================================")

# Tugas 2e
import numpy as np

print("[INVERS MATRIKS MENGGUNAKAN METODE ADJOIN]")

def hitung_inverse_matriks():
    A = np.array([[4, -1, -1],
                  [-1, 3, -1],
                  [-1, -1, 5]])
    
    B = np.array([5, 3, 4])
    
    # Menghitung inverse matriks A
    try:
        A_inv = np.linalg.inv(A)
        return A_inv
    except np.linalg.LinAlgError:
        return "Matriks tidak dapat diinvers."

# Memanggil fungsi dan mencetak hasil
inverse_matriks = hitung_inverse_matriks()
print("Inverse Matriks A:")
print(inverse_matriks)
print("=============================================================")
